# 组件化开发整理

组件化与路由方式管理项目

## 主要思想
1. 将界面按页面分组
2. 每个组独自创建子库（可在库与应用间配置切换，进行独立子库开发调试）
3. 主项目将需要的子库引入
4. 子库间互相隔离，无法跳转，故要使用 Jiek_annotationcompiler 进行编译时逐个子库注册注解 Activity
5. 运行时，使用反射，将统计的 Activity注解遍历态，注册至 JiekRoute.init运行时环境
6. 使用 JiekRoute 进行key替换成对应 Activity 进行路由跳转

## gradle mac配置 gradle ali maven 全局代理

> cd ~/.gradle/
> touch init.gradle
```
allprojects {
    repositories {
        def ALIYUN_REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public'
        def ALIYUN_JCENTER_URL = 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        def ALIYUN_GOOGLE_URL = 'http://maven.aliyun.com/nexus/content/repositories/google'
        all { ArtifactRepository repo ->
            if(repo instanceof MavenArtifactRepository){
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced aa by $ALIYUN_REPOSITORY_URL."
                    remove repo
                }
                if (url.startsWith('https://jcenter.bintray.com/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced bb by $ALIYUN_JCENTER_URL."
                    remove repo
                }
                if (url.startsWith('https://dl.google.com/dl/android/maven2/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced cc by $ALIYUN_GOOGLE_URL."
                    remove repo
                }
            }
        }
        maven { url ALIYUN_GOOGLE_URL }
        maven { url ALIYUN_REPOSITORY_URL }
        maven { url ALIYUN_JCENTER_URL }
    }
}
```

## 组件化配置

1. 将项目各子模块单独拆分开发
2. 使用 gradle.properties 中定义变量，区分子项目是库或应用
3. Library 库不能包含 applicationId，用变量屏蔽
4. 但子库间因隔离关系，无法相互调用。考虑 ARoute
5. 手写 ARoute 主要逻辑

